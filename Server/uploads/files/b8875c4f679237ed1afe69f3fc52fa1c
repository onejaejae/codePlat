1. 비밀번호 변경.
2. 깃허브 공개 여부 체크
3. 게시글 올릴 시 파일
5. 포럼 글 댓글 작성 양식 okky으로
6. 별점 삭제
7. 스크랩
8. 마이페이지
9. 채팅
10. 알림
11. 배포
12. 소개, 개인정보처리방침 등
13. footer , 디자인
14. 관리자 계정, 권한, 백엔드 api 로그인 인증 구현
15. 이메일 인증 안했을 경우 에러 핸들링
16. github 처음 로그인시 desealize 호출 안됨 , 리다이렉션 뒤에는 호출 되고 로그인 처리
17. 스크랩순일때 에러
18. githubLoginCallback 다시 체크

------------------------------------------------------------------------------------------------------------------------------------------

조회 페이지는 get으로 수정 모두 query로 데이터 던져줌( 가능한 HTTP의 가장 기본적인 약속을 지키자, get일 경우 캐시가능, http 표준을 지키기 위해)
put -> patch로 변경
get 요청에 body 넣어서 보내는거 x => 실무에서 안씀, 권장하는 방법 아님
post 요청은 동일한 요청을 했을 때 결과값이 다르므로(멱등하지 않으므로 ex 중복 결제) 중복 호출이 될 경우 예상치 못한 결과를 초래할 수 있다

api url설계 다시 하기 

- 리소스, 행위는 method로 최대한
- 계층 구조상 상위를 컬렉션으로 보고 복수단어 사용 권장
- 게시글 수정 put (모든 정보 다시 수정하므로) , 모든 정보 오는지 check

PRG(Post/Redirect/Get)을 사용해 게시글 중복 작성 방지
